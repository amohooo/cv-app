{"ast":null,"code":"var _jsxFileName = \"/Users/mohanhao/Downloads/My_CV/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [initialized, setInitialized] = useState(false);\n\n  // Only check auth once on initial mount\n  useEffect(() => {\n    // Detect container restart or new browser session\n    const detectRestart = () => {\n      try {\n        // Generate a unique session ID for this browser tab\n        let sessionId = localStorage.getItem('sessionId');\n        if (!sessionId) {\n          sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n          localStorage.setItem('sessionId', sessionId);\n          console.log('New session started, clearing authentication state');\n          localStorage.removeItem('token');\n          return true;\n        }\n\n        // Check if this is a new page load (not just a React re-render)\n        const lastLoadTime = sessionStorage.getItem('lastLoadTime');\n        const currentTime = Date.now();\n        if (!lastLoadTime) {\n          // This is a new page load\n          sessionStorage.setItem('lastLoadTime', currentTime.toString());\n\n          // Check if it's been more than 1 minute since the last recorded load\n          // This would suggest a container restart or browser restart\n          const lastRecordedTime = localStorage.getItem('lastRecordedTime');\n          if (!lastRecordedTime || currentTime - parseInt(lastRecordedTime) > 60000) {\n            console.log('Container restart or new browser session detected');\n            localStorage.removeItem('token');\n            localStorage.setItem('lastRecordedTime', currentTime.toString());\n            return true;\n          }\n          localStorage.setItem('lastRecordedTime', currentTime.toString());\n        }\n        return false;\n      } catch (err) {\n        console.error('Error in session detection:', err);\n        return false;\n      }\n    };\n\n    // Run detection and auth check\n    const isRestart = detectRestart();\n    if (isRestart) {\n      setUser(null);\n      setLoading(false);\n      setInitialized(true);\n    } else if (!initialized) {\n      checkAuthOnStartup();\n    }\n  }, [initialized]);\n  const checkAuthOnStartup = async () => {\n    // Skip auth check on login page\n    if (window.location.pathname.includes('/login')) {\n      setLoading(false);\n      setInitialized(true);\n      return;\n    }\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setUser(null);\n        if (!window.location.pathname.includes('/login')) {\n          window.location.href = '/login';\n        }\n        return;\n      }\n\n      // Add token verification check to ensure it's still valid\n      try {\n        const response = await api.get('/auth/check');\n        if (response.data.authenticated) {\n          setUser(response.data.user);\n        } else {\n          // Token not valid anymore\n          setUser(null);\n          localStorage.removeItem('token');\n          if (!window.location.pathname.includes('/login')) {\n            window.location.href = '/login';\n          }\n        }\n      } catch (error) {\n        // If auth check fails, clear token and redirect to login\n        console.error('Auth check error:', error);\n        setUser(null);\n        localStorage.removeItem('token');\n        if (!window.location.pathname.includes('/login')) {\n          window.location.href = '/login';\n        }\n      }\n    } finally {\n      setLoading(false);\n      setInitialized(true);\n    }\n  };\n  const login = async (username, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await api.post('/auth/login', {\n        username,\n        password\n      });\n      const {\n        token,\n        user\n      } = response.data;\n\n      // Store token in localStorage\n      localStorage.setItem('token', token);\n      setUser(user);\n\n      // Use a synchronous redirect\n      window.location.href = '/';\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login error:', error);\n      setUser(null);\n      localStorage.removeItem('token');\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      setLoading(true);\n      await api.post('/auth/logout');\n      setUser(null);\n      localStorage.removeItem('token');\n      setError(null);\n\n      // Use a synchronous redirect\n      window.location.href = '/login';\n    } catch (error) {\n      console.error('Logout error:', error);\n      setError('Logout failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"QWZMLRQim+3e9MN4d0OCQQuKmLY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","initialized","setInitialized","detectRestart","sessionId","localStorage","getItem","Date","now","Math","random","toString","substr","setItem","console","log","removeItem","lastLoadTime","sessionStorage","currentTime","lastRecordedTime","parseInt","err","isRestart","checkAuthOnStartup","window","location","pathname","includes","token","href","response","get","data","authenticated","login","username","password","post","_error$response","_error$response$data","message","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mohanhao/Downloads/My_CV/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../services/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [initialized, setInitialized] = useState(false);\n\n  // Only check auth once on initial mount\n  useEffect(() => {\n    // Detect container restart or new browser session\n    const detectRestart = () => {\n      try {\n        // Generate a unique session ID for this browser tab\n        let sessionId = localStorage.getItem('sessionId');\n        if (!sessionId) {\n          sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n          localStorage.setItem('sessionId', sessionId);\n          console.log('New session started, clearing authentication state');\n          localStorage.removeItem('token');\n          return true;\n        }\n        \n        // Check if this is a new page load (not just a React re-render)\n        const lastLoadTime = sessionStorage.getItem('lastLoadTime');\n        const currentTime = Date.now();\n        \n        if (!lastLoadTime) {\n          // This is a new page load\n          sessionStorage.setItem('lastLoadTime', currentTime.toString());\n          \n          // Check if it's been more than 1 minute since the last recorded load\n          // This would suggest a container restart or browser restart\n          const lastRecordedTime = localStorage.getItem('lastRecordedTime');\n          if (!lastRecordedTime || (currentTime - parseInt(lastRecordedTime)) > 60000) {\n            console.log('Container restart or new browser session detected');\n            localStorage.removeItem('token');\n            localStorage.setItem('lastRecordedTime', currentTime.toString());\n            return true;\n          }\n          \n          localStorage.setItem('lastRecordedTime', currentTime.toString());\n        }\n        \n        return false;\n      } catch (err) {\n        console.error('Error in session detection:', err);\n        return false;\n      }\n    };\n    \n    // Run detection and auth check\n    const isRestart = detectRestart();\n    if (isRestart) {\n      setUser(null);\n      setLoading(false);\n      setInitialized(true);\n    } else if (!initialized) {\n      checkAuthOnStartup();\n    }\n  }, [initialized]);\n\n  const checkAuthOnStartup = async () => {\n    // Skip auth check on login page\n    if (window.location.pathname.includes('/login')) {\n      setLoading(false);\n      setInitialized(true);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      \n      if (!token) {\n        setUser(null);\n        if (!window.location.pathname.includes('/login')) {\n          window.location.href = '/login';\n        }\n        return;\n      }\n\n      // Add token verification check to ensure it's still valid\n      try {\n        const response = await api.get('/auth/check');\n        \n        if (response.data.authenticated) {\n          setUser(response.data.user);\n        } else {\n          // Token not valid anymore\n          setUser(null);\n          localStorage.removeItem('token');\n          if (!window.location.pathname.includes('/login')) {\n            window.location.href = '/login';\n          }\n        }\n      } catch (error) {\n        // If auth check fails, clear token and redirect to login\n        console.error('Auth check error:', error);\n        setUser(null);\n        localStorage.removeItem('token');\n        \n        if (!window.location.pathname.includes('/login')) {\n          window.location.href = '/login';\n        }\n      }\n    } finally {\n      setLoading(false);\n      setInitialized(true);\n    }\n  };\n\n  const login = async (username, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await api.post('/auth/login', { \n        username, \n        password \n      });\n      \n      const { token, user } = response.data;\n      \n      // Store token in localStorage\n      localStorage.setItem('token', token);\n      \n      setUser(user);\n      \n      // Use a synchronous redirect\n      window.location.href = '/';\n      \n      return true;\n    } catch (error) {\n      console.error('Login error:', error);\n      setUser(null);\n      localStorage.removeItem('token');\n      setError(error.response?.data?.message || 'Login failed');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      setLoading(true);\n      await api.post('/auth/logout');\n      setUser(null);\n      localStorage.removeItem('token');\n      setError(null);\n      \n      // Use a synchronous redirect\n      window.location.href = '/login';\n    } catch (error) {\n      console.error('Logout error:', error);\n      setError('Logout failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user,\n    login,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}